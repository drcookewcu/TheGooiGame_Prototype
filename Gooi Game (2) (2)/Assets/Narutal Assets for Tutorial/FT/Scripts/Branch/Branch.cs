using System.Collections;
using System.Collections.Generic;
using UnityEngine;

namespace FractalTree
{
	/// <summary>
	/// Contract for all fractal tree branches. Includes positional data and initialisation.
	/// </summary>
	public interface Branch
	{
		/// <summary>
		/// Gets the start position.
		/// </summary>
		/// <value>The start position.</value>
		Vector2 startPos { get; }

		/// <summary>
		/// Gets the end position.
		/// </summary>
		/// <value>The end position.</value>
		Vector2 endPos { get; }

		/// <summary>
		/// Gets or sets the colonization direction. Used for space colonization tree generation. Defines the direction of the next branch in relation
		/// to nearby leaves.
		/// </summary>
		/// <value>The colonization dir.</value>
		Vector2 colonizationDir { get; set; }

		/// <summary>
		/// Gets or sets the number of nearby colonizaion leaves.
		/// </summary>
		/// <value>The colonization leaf count.</value>
		int colonizationLeafCount { get; set; }

		/// <summary>
		/// Gets or sets a value indicating whether this <see cref="FractalTree.Branch"/> has branched.
		/// </summary>
		/// <value><c>true</c> if has branched; otherwise, <c>false</c>.</value>
		bool hasBranched { get; set; }

		/// <summary>
		/// Gets the transform.
		/// </summary>
		/// <value>The transform.</value>
		Transform transform { get; }

		/// <summary>
		/// Setup the specified owner, end, thickness and color. Used to create a branch that is attached to another branch.
		/// </summary>
		/// <param name="owner">The attached branch.</param>
		/// <param name="end">End.</param>
		/// <param name="thickness">Thickness.</param>
		/// <param name="color">Color.</param>
		void Setup (Branch owner, Vector2 end,
		            float thickness, Color color);

		/// <summary>
		/// Setup the specified owner, end, thickness and color. Used to create a branch that is attached to another branch that has its mass autogenerated based on line width.
		/// </summary>
		/// <param name="owner">Owner.</param>
		/// <param name="end">End.</param>
		/// <param name="thickness">Thickness.</param>
		/// <param name="color">Color.</param>
		/// <param name="autoMass">If set to <c>true</c> auto mass.</param>
		void Setup (Branch owner, Vector2 end,
		            float thickness, Color color, bool autoMass);

		/// <summary>
		/// Setup the specified start, end, thickness and color. Creates a stand alone branch that is not connected to any other branch.
		/// </summary>
		/// <param name="start">Start.</param>
		/// <param name="end">End.</param>
		/// <param name="thickness">Thickness.</param>
		/// <param name="color">Color.</param>
		void Setup (Vector2 start, Vector2 end,
		            float thickness, Color color);

		/// <summary>
		/// Setup the specified start, end, thickness and color. Creates a stand alone branch that is not connected to any other branch that has its mass autogenerated based on line width.
		/// </summary>
		/// <param name="start">Start.</param>
		/// <param name="end">End.</param>
		/// <param name="width">Width.</param>
		/// <param name="color">Color.</param>
		/// <param name="autoMass">If set to <c>true</c> auto mass.</param>
		void Setup (Vector2 start, Vector2 end,
		            float width, Color color, bool autoMass);


		/// <summary>
		/// Returns a new branch based on current branch angle plus parameter angle.
		/// </summary>
		/// <returns>The branching.</returns>
		/// <param name="angle">Angle.</param>
		/// <typeparam name="T">The 1st type parameter.</typeparam>
		T DoBranching<T> (float angle) where T : Branch;

		/// <summary>
		/// Resets the colonization paramater. Used only for space colonization generation.
		/// </summary>
		void DoColonizationReset ();

	}

	/// <summary>
	/// Extends branch with point data for moving branches.
	/// </summary>
	public interface MovingBranch : Branch
	{
		/// <summary>
		/// Gets the start point mass. Used to add spring force
		/// </summary>
		/// <value>The start point.</value>
		PointMass startPoint { get; }

		/// <summary>
		/// Gets the end point mass. Used to add spring force.
		/// </summary>
		/// <value>The end point.</value>
		PointMass endPoint { get; }
	}

}